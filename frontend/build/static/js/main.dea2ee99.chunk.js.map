{"version":3,"sources":["Context/ChatProvider.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","components/Authentication/Login.js","components/Authentication/Signup.js","components/TypingEffect.js","Pages/try.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","name","getSenderPic","_users$2","pic","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_jsxs","_Fragment","onClick","IconButton","d","base","icon","ViewIcon","Modal","size","isCentered","ModalOverlay","ModalContent","h","ModalHeader","fontSize","fontFamily","justifyContent","ModalCloseButton","ModalBody","flexDir","alignItems","Image","borderRadius","boxSize","src","alt","Text","md","email","ModalFooter","Button","ScrollableChat","ScrollableFeed","map","style","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","marginTop","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","mb","variant","colorScheme","CloseIcon","pl","UserListItem","Box","bg","_hover","background","color","w","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","loading","setLoading","renameloading","setRenameLoading","toast","useToast","handleAddUser","async","find","u","user1","title","status","duration","isClosable","position","groupAdmin","config","headers","Authorization","token","data","axios","put","chatId","error","description","response","message","handleRemove","chatName","flexWrap","pb","FormControl","Input","placeholder","onChange","e","target","ml","isLoading","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","open","setOpen","p","ArrowBackIcon","isGroupChat","toUpperCase","className","overflowY","alignSelf","margin","onKeyDown","event","key","post","id","isRequired","Lottie","options","width","marginBottom","typingTimeout","clearTimeout","setTimeout","alignContent","prev","EmojiPicker","onEmojiClick","emoji","getSenderFull","Chatbox","borderWidth","maxHeight","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","stringify","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","User","c","accessChat","Chatpage","Login","show","setShow","setEmail","password","setPassword","VStack","spacing","FormLabel","type","InputGroup","InputRightElement","handleClick","setItem","Signup","setName","confirmpassword","setConfirmpassword","setPic","picLoading","setPicLoading","accept","pics","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","textArray","TypingEffect","text","setText","cursorRef","useRef","typingTimeoutRef","erasingTimeoutRef","textArrayIndexRef","charIndexRef","current","classList","contains","add","charAt","remove","erase","typingDelay","newTextDelay","ref","Trial","Container","maxW","centerContent","Tabs","isFitted","TabList","Tab","TabPanels","TabPanel","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.dea2ee99.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n\r\nexport const getSenderPic = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].pic : users[0].pic;\r\n};\r\n\r\nexport const getSenderEmail = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].email : users[0].email;\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Image } from \"@chakra-ui/react\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull, getSenderPic } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let typingTimeout;\r\n    clearTimeout(typingTimeout);\r\n    typingTimeout = setTimeout(() => {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      setTyping(false);\r\n    }, 3000);\r\n  };\r\n  const [open, setOpen] = useState(false);\r\n  const handleEmoji = (e) => {\r\n    setNewMessage((prev) => prev + e.emoji);\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            p={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n            bg=\"white\"\r\n            borderRadius=\"10px\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  <Image\r\n                    borderRadius=\"full\"\r\n                    boxSize=\"40px\"\r\n                    src={getSenderPic(user, selectedChat.users)}\r\n                    alt=\"\"\r\n                  />\r\n                  <div className=\"title\">\r\n                    <b>{getSender(user, selectedChat.users).toUpperCase()}</b>\r\n                  </div>\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n            bg=\"rgba(0, 0, 0, 0.2)\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{\r\n                      marginBottom: 15,\r\n                      marginLeft: 0,\r\n                    }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <div className=\"keyboard\">\r\n                <Input\r\n                  variant=\"filled\"\r\n                  placeholder=\"Enter a message..\"\r\n                  value={newMessage}\r\n                  onChange={typingHandler}\r\n                />\r\n                <div style={{ alignContent: \"center\" }}>\r\n                  <img\r\n                    src=\"/emoji.jpg\"\r\n                    alt=\"\"\r\n                    width=\"30\"\r\n                    onClick={() => setOpen((prev) => !prev)}\r\n                  />\r\n                  <div className=\"picker\">\r\n                    <EmojiPicker open={open} onEmojiClick={handleEmoji} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box\r\n          d=\"flex\"\r\n          w=\"100%\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100%\"\r\n          bg=\"rgba(0, 0, 0, 0.2)\"\r\n        >\r\n          <img src=\"/start.png\" alt=\"\"></img>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport SingleChat from \"./SingleChat.js\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n      maxHeight=\"100%\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <img src=\"Title_w.png\" className=\"iconbox\" alt=\"\" />\r\n        <img src=\"Icon_w.png\" className=\"iconboxmobile\" alt=\"\" />\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton\r\n              as={Button}\r\n              bg=\"white\"\r\n              p={0}\r\n              rightIcon={<ChevronDownIcon />}\r\n            >\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((User) => (\r\n                <UserListItem\r\n                  key={User._id}\r\n                  user={User}\r\n                  handleFunction={() => accessChat(User._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"Bolbachchan\");\r\n      data.append(\"cloud_name\", \"dkmecg1xb\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/dkmecg1xb/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst textArray = [\r\n  \"Jab BolBachchan Hai, Har Baat Hai Khaas!\",\r\n  \"BolBachchan: Aapki Baat, Hamari Boli!\",\r\n  \"BolBachchan: Har Dil Ki Baat, Ek Chat Away!\",\r\n  \"BolBachchan: Har Lafz, Ek Nayi Kahani!\",\r\n  \"Chat Ka Asli Maza, Sirf BolBachchan Mein!\",\r\n  \"BolBachchan: Chat Karo, Dosti Bharo!\",\r\n  \"Dil Se Bol, BolBachchan Ke Sang!\",\r\n];\r\n\r\nconst TypingEffect = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const cursorRef = useRef(null);\r\n  const typingTimeoutRef = useRef(null);\r\n  const erasingTimeoutRef = useRef(null);\r\n  const textArrayIndexRef = useRef(0);\r\n  const charIndexRef = useRef(0);\r\n\r\n  const typingDelay = 50;\r\n  const erasingDelay = 20;\r\n  const newTextDelay = 1000; // Delay between current and next text\r\n\r\n  useEffect(() => {\r\n    const type = () => {\r\n      if (charIndexRef.current < textArray[textArrayIndexRef.current].length) {\r\n        if (!cursorRef.current.classList.contains(\"typing\")) {\r\n          cursorRef.current.classList.add(\"typing\");\r\n        }\r\n        setText(\r\n          (prev) =>\r\n            prev +\r\n            textArray[textArrayIndexRef.current].charAt(charIndexRef.current)\r\n        );\r\n        charIndexRef.current++;\r\n        typingTimeoutRef.current = setTimeout(type, typingDelay);\r\n      } else {\r\n        if (cursorRef.current) {\r\n          cursorRef.current.classList.remove(\"typing\");\r\n        }\r\n        typingTimeoutRef.current = setTimeout(erase, newTextDelay);\r\n      }\r\n    };\r\n\r\n    const erase = () => {\r\n      if (charIndexRef.current > 0) {\r\n        if (\r\n          cursorRef.current &&\r\n          !cursorRef.current.classList.contains(\"typing\")\r\n        ) {\r\n          cursorRef.current.classList.add(\"typing\");\r\n        }\r\n        setText((prev) => prev.substring(0, prev.length - 1));\r\n        charIndexRef.current--;\r\n        erasingTimeoutRef.current = setTimeout(erase, erasingDelay);\r\n      } else {\r\n        if (cursorRef.current) {\r\n          cursorRef.current.classList.remove(\"typing\");\r\n        }\r\n        textArrayIndexRef.current++;\r\n        if (textArrayIndexRef.current >= textArray.length) {\r\n          textArrayIndexRef.current = 0;\r\n        }\r\n        typingTimeoutRef.current = setTimeout(type, typingDelay + 1100);\r\n      }\r\n    };\r\n\r\n    if (textArray.length) {\r\n      typingTimeoutRef.current = setTimeout(type, newTextDelay + 250);\r\n    }\r\n\r\n    // Clean up the effects if the component unmounts\r\n    return () => {\r\n      clearTimeout(typingTimeoutRef.current);\r\n      clearTimeout(erasingTimeoutRef.current);\r\n      setText(\"\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container1\">\r\n      <p>\r\n        <span className=\"typed-text\">{text}</span>\r\n        <span ref={cursorRef} className=\"cursor\">\r\n          &nbsp;\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingEffect;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n} from \"@chakra-ui/react\";\r\nimport TypingEffect from \"../components/TypingEffect\";\r\n\r\nfunction Trial() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"left\">\r\n        <img src=\"/Title_w.png\" alt=\"\"></img>\r\n        <TypingEffect />\r\n      </div>\r\n      <div className=\"right\">\r\n        <div className=\"mobile\">\r\n          <img src=\"/Title_w.png\" alt=\"\"></img>\r\n          <TypingEffect />\r\n        </div>\r\n        <Container maxW=\"xl\" centerContent>\r\n          <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n            <Tabs isFitted variant=\"soft-rounded\">\r\n              <TabList mb=\"1em\">\r\n                <Tab>Login</Tab>\r\n                <Tab>Sign Up</Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                <TabPanel>\r\n                  <Login />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Signup />\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </Box>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Trial;\r\n","import \"./App.css\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\nimport Trial from \"./Pages/try\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <Route path=\"/\" component={Homepage} exact /> */}\r\n      <Route path=\"/\" component={Trial} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}